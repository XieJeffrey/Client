using System;using System.Collections;using System.Collections.Generic;public class test1Base{	public readonly uint itemID;	public readonly uint atk;	public readonly float def;}public class test1BaseManager: Singleton<test1BaseManager>{	private Dictionary<string, test1Base> m_dataList = new Dictionary<string, test1Base>();	private readonly long version=131535008913839714;	public int Size	{		get { return m_dataList.Count; }	}	public test1Base  Get(int index)	{		if (index > -1 && index < m_dataList.Count)		{			int i = 0;			 foreach (var tmp in m_dataList.Values)			 {				 if (index == i)				 {					return tmp;				 }				 i++;			 }		}		  return null;	}	public test1Base Find(uint key1,uint key2=0,uint key3=0)	{		 string key = key1.ToString();		 if (key2 != 0) { key += key2.ToString(); }		 if (key3 != 0) { key += key3.ToString(); }		 if (m_dataList.ContainsKey(key))		 {			return m_dataList[key];		 }		 return null;	}	 public bool Load(string path)	 {		 return TableUtility.instance.Load<test1Base>(path,ref m_dataList,version.ToString());	}  }
